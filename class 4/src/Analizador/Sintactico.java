
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 10 19:20:16 CST 2021
//----------------------------------------------------

package Analizador;

import AST.Errores.MiError;
import AST.Errores.TipoError;
import AST.Expresiones.Condicion;
import AST.Expresiones.Expresion;
import AST.Expresiones.OperacionAritmeticas;
import AST.Expresiones.TipoCondicion;
import AST.Expresiones.TipoOperacion;
import AST.Metodo;
import AST.Sentencias.Asignacion;
import AST.Sentencias.Declaracion;
import AST.Sentencias.For;
import AST.Sentencias.If;
import AST.Sentencias.Incremento;
import AST.Sentencias.LlamadaMetodo;
import AST.Sentencias.Sentencia;
import AST.Sentencias.While;
import AST.Simbolos.TipoDatoSimbolo;
import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 10 19:20:16 CST 2021
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\022" +
    "\004\000\002\022\003\000\002\021\007\000\002\024\005" +
    "\000\002\024\004\000\002\024\004\000\002\024\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\023" +
    "\005\000\002\023\004\000\002\016\013\000\002\020\005" +
    "\000\002\017\007\000\002\012\007\000\002\012\011\000" +
    "\002\011\006\000\002\013\005\000\002\013\003\000\002" +
    "\013\002\000\002\010\005\000\002\007\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\003\000\002\003\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\006\000\002\005\006\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\031\007\001\002\000\006\002\000\031" +
    "\007\001\002\000\006\002\ufffe\031\ufffe\001\002\000\004" +
    "\002\134\001\002\000\004\035\010\001\002\000\004\010" +
    "\011\001\002\000\004\011\012\001\002\000\004\017\014" +
    "\001\002\000\006\002\ufffd\031\ufffd\001\002\000\022\020" +
    "\035\022\020\024\015\025\033\026\032\027\025\030\031" +
    "\035\036\001\002\000\004\010\120\001\002\000\022\020" +
    "\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\035\ufff5\001\002\000\022\020\ufff3\022\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\035\ufff3\001\002\000\004" +
    "\010\112\001\002\000\004\016\111\001\002\000\004\016" +
    "\ufff8\001\002\000\022\020\107\022\020\024\015\025\033" +
    "\026\032\027\025\030\031\035\036\001\002\000\022\020" +
    "\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\035\ufff9\001\002\000\004\035\uffe3\001\002\000\004\016" +
    "\ufff6\001\002\000\004\016\ufff7\001\002\000\004\035\104" +
    "\001\002\000\004\035\uffe4\001\002\000\004\035\uffe5\001" +
    "\002\000\004\010\077\001\002\000\022\020\ufff4\022\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\035\ufff4\001" +
    "\002\000\030\002\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\035\ufff1\001" +
    "\002\000\006\010\037\014\040\001\002\000\016\011\uffe8" +
    "\021\uffe8\032\044\033\041\034\042\035\046\001\002\000" +
    "\012\032\044\033\041\034\042\035\046\001\002\000\030" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\021\uffd6\001\002\000\030" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\021\uffd8\001\002\000\030" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\021\uffdd\001\002\000\030" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\021\uffd7\001\002\000\030" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\021\uffde\001\002\000\030" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\021\uffd5\001\002\000\024" +
    "\004\052\005\053\006\057\007\050\012\056\013\055\014" +
    "\051\015\054\016\uffe7\001\002\000\012\032\044\033\041" +
    "\034\042\035\046\001\002\000\004\014\067\001\002\000" +
    "\012\032\044\033\041\034\042\035\046\001\002\000\012" +
    "\032\044\033\041\034\042\035\046\001\002\000\004\014" +
    "\063\001\002\000\012\032\044\033\041\034\042\035\046" +
    "\001\002\000\012\032\044\033\041\034\042\035\046\001" +
    "\002\000\012\032\044\033\041\034\042\035\046\001\002" +
    "\000\030\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\021\uffe0\001\002" +
    "\000\030\004\052\005\053\006\057\007\050\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\054\016\uffdc\021\uffdc\001\002" +
    "\000\030\004\052\005\053\006\057\007\050\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\054\016\uffdb\021\uffdb\001\002" +
    "\000\012\032\044\033\041\034\042\035\046\001\002\000" +
    "\030\004\052\005\053\006\057\007\050\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\054\016\uffd9\021\uffd9\001\002\000" +
    "\030\004\uffe1\005\uffe1\006\057\007\050\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\021\uffe1\001\002\000" +
    "\030\004\uffe2\005\uffe2\006\057\007\050\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\021\uffe2\001\002\000" +
    "\012\032\044\033\041\034\042\035\046\001\002\000\030" +
    "\004\052\005\053\006\057\007\050\011\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\054\016\uffda\021\uffda\001\002\000\030" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\021\uffdf\001\002\000\026" +
    "\004\052\005\053\006\057\007\050\011\uffe9\012\056\013" +
    "\055\014\051\015\054\021\uffe9\001\002\000\006\011\074" +
    "\021\075\001\002\000\004\016\uffeb\001\002\000\012\032" +
    "\044\033\041\034\042\035\046\001\002\000\026\004\052" +
    "\005\053\006\057\007\050\011\uffea\012\056\013\055\014" +
    "\051\015\054\021\uffea\001\002\000\012\032\044\033\041" +
    "\034\042\035\046\001\002\000\024\004\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\011\102\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\001\002\000\022\004\052\005\053\006\057\007\050\012" +
    "\056\013\055\014\051\015\054\001\002\000\004\017\014" +
    "\001\002\000\022\020\uffee\022\uffee\024\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\035\uffee\001\002\000\004\016\uffe6" +
    "\001\002\000\004\016\110\001\002\000\022\020\ufffa\022" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\035\ufffa" +
    "\001\002\000\030\002\ufff2\020\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\035\ufff2" +
    "\001\002\000\022\020\ufffc\022\ufffc\024\ufffc\025\ufffc\026" +
    "\ufffc\027\ufffc\030\ufffc\035\ufffc\001\002\000\022\020\ufffb" +
    "\022\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\035" +
    "\ufffb\001\002\000\012\032\044\033\041\034\042\035\046" +
    "\001\002\000\024\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011" +
    "\114\012\uffdd\013\uffdd\014\uffdd\015\uffdd\001\002\000\004" +
    "\017\014\001\002\000\024\020\uffed\022\uffed\023\116\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\030\uffed\035\uffed\001\002" +
    "\000\004\017\014\001\002\000\022\020\uffec\022\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\035\uffec\001\002" +
    "\000\004\035\122\001\002\000\004\016\123\001\002\000" +
    "\004\014\040\001\002\000\012\032\044\033\041\034\042" +
    "\035\046\001\002\000\024\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\125\001\002" +
    "\000\004\035\126\001\002\000\004\004\132\001\002\000" +
    "\004\011\130\001\002\000\004\017\014\001\002\000\022" +
    "\020\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\035\ufff0\001\002\000\004\004\133\001\002\000\004" +
    "\011\uffef\001\002\000\004\002\001\001\002\000\006\002" +
    "\uffff\031\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\010\002\005\021\004\022\003\001\001\000" +
    "\004\021\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\012\001\001\000\002\001\001\000\026\006\020" +
    "\007\021\010\026\011\025\012\015\014\023\015\027\016" +
    "\033\017\016\024\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\104\007\021\010\026" +
    "\011\025\012\015\014\105\015\027\016\033\017\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\071\004\044\005" +
    "\042\013\072\001\001\000\010\003\046\004\044\005\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\070\004\044\005\042\001" +
    "\001\000\002\001\001\000\010\003\065\004\044\005\042" +
    "\001\001\000\010\003\064\004\044\005\042\001\001\000" +
    "\002\001\001\000\010\003\061\004\044\005\042\001\001" +
    "\000\010\003\060\004\044\005\042\001\001\000\010\003" +
    "\057\004\044\005\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\063\004\044\005" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\067\004\044\005\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\075\004\044\005" +
    "\042\001\001\000\002\001\001\000\010\003\100\004\044" +
    "\005\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\100\004\044" +
    "\005\112\001\001\000\002\001\001\000\004\023\114\001" +
    "\001\000\002\001\001\000\004\023\116\001\001\000\002" +
    "\001\001\000\004\010\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\100\004\044\005\123\001\001" +
    "\000\002\001\001\000\004\020\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        AnalizadorLenguaje.errores.add(new MiError(s.left, s.right, TipoError.SINTACTICO, 
                "Se detectó un error sintáctico ("+s.value+")"));
        
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        AnalizadorLenguaje.errores.add(new MiError(s.left, s.right, TipoError.SINTACTICO, 
                        "Se detectó un error sintáctico ("+s.value+")"));
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VALOR ::= identificador 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OperacionAritmeticas(TipoOperacion.ID,(String)a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VALOR ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OperacionAritmeticas(TipoOperacion.NUMERO,(String)a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VALOR ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OperacionAritmeticas(TipoOperacion.NUMERO,(String)a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALOR ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OperacionAritmeticas(TipoOperacion.CADENA,(String)a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICION ::= EXPRESION not igual EXPRESION 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =  new Condicion(a,b,TipoCondicion.DIFERENTE,cleft,cright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICION ::= EXPRESION igual igual EXPRESION 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =  new Condicion(a,b,TipoCondicion.IGUAL,cleft,cright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICION ::= EXPRESION menor EXPRESION 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT =  new Condicion(a,b,TipoCondicion.MENOR,cleft,cright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICION ::= EXPRESION mayor EXPRESION 
            {
              Condicion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT =  new Condicion(a,b,TipoCondicion.MAYOR,cleft,cright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= CONDICION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= VALOR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OperacionAritmeticas(a,b,TipoOperacion.MULTIPLICACION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OperacionAritmeticas(a,b,TipoOperacion.DIVISION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OperacionAritmeticas(a,b,TipoOperacion.RESTA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OperacionAritmeticas(a,b,TipoOperacion.SUMA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPODATO ::= pr_boolean 
            {
              TipoDatoSimbolo RESULT =null;
		 RESULT = TipoDatoSimbolo.BOOLEANO; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPODATO ::= pr_string 
            {
              TipoDatoSimbolo RESULT =null;
		 RESULT = TipoDatoSimbolo.CADENA; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPODATO ::= pr_number 
            {
              TipoDatoSimbolo RESULT =null;
		 RESULT = TipoDatoSimbolo.NUMERO; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= TIPODATO identificador 
            {
              Sentencia RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		TipoDatoSimbolo tipo = (TipoDatoSimbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT = new Declaracion(tipo, nombre, tipoleft, tipoleft); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= identificador igual EXPRESION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
RESULT = new Asignacion(a,b,aleft,aright);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAPARAMS ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTAPARAMS ::= EXPRESION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
ArrayList<Expresion> lista = new ArrayList();
lista.add(a); 
RESULT = lista;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTAPARAMS ::= LISTAPARAMS coma EXPRESION 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
ArrayList<Expresion> lista = (ArrayList<Expresion>) params;
lista.add(b); 
RESULT = lista;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAPARAMS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LLAMADAMF ::= identificador par1 LISTAPARAMS par2 
            {
              Sentencia RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
            RESULT = new LlamadaMetodo((ArrayList<Expresion>) array,(String) nombre, nombreleft, nombreright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADAMF",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IFELSE ::= pr_if par1 CONDICION par2 BLOQUESENTENCIAS pr_else BLOQUESENTENCIAS 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Sentencia> b = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Sentencia> c = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If(a,b,c, aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFELSE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IFELSE ::= pr_if par1 CONDICION par2 BLOQUESENTENCIAS 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Sentencia> b = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new If(a,b,aleft, aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IFELSE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WHILE ::= pr_while par1 CONDICION par2 BLOQUESENTENCIAS 
            {
              Sentencia RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Condicion a = (Condicion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Sentencia> b = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
RESULT = new While(a,b,zleft,zright);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INCREMENTO ::= identificador mas mas 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Incremento(a,aleft,aright);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INCREMENTO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FOR ::= pr_for par1 ASIGNACION puntoycoma CONDICION puntoycoma INCREMENTO par2 BLOQUESENTENCIAS 
            {
              Sentencia RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Condicion b = (Condicion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Sentencia> d = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
RESULT = new For(a,b,c,d,zleft,zright);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQUESENTENCIAS ::= llave1 llave2 
            {
              ArrayList<Sentencia> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUESENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQUESENTENCIAS ::= llave1 SENTENCIAS llave2 
            {
              ArrayList<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Sentencia> a = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUESENTENCIAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIACC ::= WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIACC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIACC ::= FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIACC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIACC ::= IFELSE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIACC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= LLAMADAMF 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= ASIGNACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DECLARACION 
            {
              Sentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= SENTENCIACC 
            {
              ArrayList<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
ArrayList<Sentencia> lista = new ArrayList();
lista.add((Sentencia)a); 
RESULT = lista;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= SENTENCIAS SENTENCIACC 
            {
              ArrayList<Sentencia> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Sentencia> sent = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
ArrayList<Sentencia> lista =  sent;
lista.add((Sentencia)b); 
RESULT = lista;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIAS ::= SENTENCIA puntoycoma 
            {
              ArrayList<Sentencia> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Sentencia a = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
ArrayList<Sentencia> lista = new ArrayList();
lista.add((Sentencia)a); 
RESULT = lista;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= SENTENCIAS SENTENCIA puntoycoma 
            {
              ArrayList<Sentencia> RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Sentencia> sent = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Sentencia b = (Sentencia)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
ArrayList<Sentencia> lista =  sent;
lista.add((Sentencia)b); 
RESULT = lista;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCION ::= pr_func identificador par1 par2 BLOQUESENTENCIAS 
            {
              Metodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Sentencia> b = (ArrayList<Sentencia>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Metodo(a,b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAFUNC ::= FUNCION 
            {
              ArrayList<Metodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Metodo a = (Metodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
ArrayList<Metodo> lista = new ArrayList<>();
lista.add((Metodo)a); 
RESULT = lista;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAFUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTAFUNC ::= LISTAFUNC FUNCION 
            {
              ArrayList<Metodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Metodo> l = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Metodo a = (Metodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
ArrayList<Metodo> lista =  l;
lista.add((Metodo)a); 
RESULT = lista;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAFUNC",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTAFUNC 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Metodo> lista = (ArrayList<Metodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    AnalizadorLenguaje.listaMetodos = lista;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

